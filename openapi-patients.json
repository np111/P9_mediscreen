{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0",
    "description": "<a href=\"https://github.com/np111/P9_mediscreen\">View Source on GitHub</a>"
  },
  "servers": [],
  "paths": {
    "/phone/parse": {
      "post": {
        "tags": [
          "phone-number-controller"
        ],
        "summary": "Parse a phone number input",
        "description": "Parse a phone number entered by a user and returns the API compliant version (eg. \"33 612345678\").",
        "operationId": "parsePhoneNumber",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParsePhoneNumberRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "`CLIENT`/`VALIDATION_FAILED` - A request parameter validation failed:\n- *body*: NotNull\n  - *countryCallingCode*: NotNull\n  - *number*: NotBlank, Size(max=100)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "CLIENT",
                  "code": "VALIDATION_FAILED",
                  "message": "Validation failed: {{message}}",
                  "metadata": {
                    "parameter": "{{request parameter name}}",
                    "constraint": "{{constraint class name}}",
                    "{{constraint attribute}}": "{{value}}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "`SERVICE`/`INVALID_PHONE_NUMBER` - Unable to parse and validate the given phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "SERVICE",
                  "code": "INVALID_PHONE_NUMBER",
                  "message": "string",
                  "metadata": {
                    "countryCallingCode": 0,
                    "number": "string",
                    "parseError": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patient": {
      "get": {
        "tags": [
          "patient-controller"
        ],
        "summary": "List the patients",
        "description": "Returns the list of all patients.",
        "operationId": "listPatients",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Patient"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "patient-controller"
        ],
        "summary": "Create a new patient",
        "description": "Creates a new patient, then returns it.<br/>\nNote: ID is automatically generated.",
        "operationId": "createPatient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patient"
                }
              }
            }
          },
          "400": {
            "description": "`CLIENT`/`VALIDATION_FAILED` - A request parameter validation failed:\n- *body*: NotNull\n  - *firstName*: NotNull, IsName(strict=true)\n  - *lastName*: NotNull, IsName(strict=true)\n  - *phone*: IsPhoneNumber\n  - *address*: IsAddress(strict=true)\n  - *city*: IsCity(strict=true)\n  - *postalCode*: IsPostalCode\n  - *state*: IsState(strict=true)\n  - *countryCode*: IsCountryCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "CLIENT",
                  "code": "VALIDATION_FAILED",
                  "message": "Validation failed: {{message}}",
                  "metadata": {
                    "parameter": "{{request parameter name}}",
                    "constraint": "{{constraint class name}}",
                    "{{constraint attribute}}": "{{value}}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patient/{id}": {
      "get": {
        "tags": [
          "patient-controller"
        ],
        "summary": "Return a patient",
        "description": "Returns the patient with the matching ID.",
        "operationId": "getPatient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patient"
                }
              }
            }
          },
          "400": {
            "description": "`CLIENT`/`VALIDATION_FAILED` - A request parameter validation failed:\n- *id*: NotNull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "CLIENT",
                  "code": "VALIDATION_FAILED",
                  "message": "Validation failed: {{message}}",
                  "metadata": {
                    "parameter": "{{request parameter name}}",
                    "constraint": "{{constraint class name}}",
                    "{{constraint attribute}}": "{{value}}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "`SERVICE`/`PATIENT_NOT_FOUND` - Patient does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "SERVICE",
                  "code": "PATIENT_NOT_FOUND",
                  "message": "Patient does not exists",
                  "metadata": {
                    "id": "00000000-0000-0000-0000-000000000000"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "patient-controller"
        ],
        "summary": "Update an existing patient",
        "description": "Updates the patient with the matching ID, then returns it.<br/>\nNote: ID can't be updated.",
        "operationId": "updatePatient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Patient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patient"
                }
              }
            }
          },
          "400": {
            "description": "`CLIENT`/`VALIDATION_FAILED` - A request parameter validation failed:\n- *id*: NotNull\n- *body*: NotNull\n  - *firstName*: NotNull, IsName(strict=true)\n  - *lastName*: NotNull, IsName(strict=true)\n  - *phone*: IsPhoneNumber\n  - *address*: IsAddress(strict=true)\n  - *city*: IsCity(strict=true)\n  - *postalCode*: IsPostalCode\n  - *state*: IsState(strict=true)\n  - *countryCode*: IsCountryCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "CLIENT",
                  "code": "VALIDATION_FAILED",
                  "message": "Validation failed: {{message}}",
                  "metadata": {
                    "parameter": "{{request parameter name}}",
                    "constraint": "{{constraint class name}}",
                    "{{constraint attribute}}": "{{value}}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "`SERVICE`/`PATIENT_NOT_FOUND` - Patient does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "SERVICE",
                  "code": "PATIENT_NOT_FOUND",
                  "message": "Patient does not exists",
                  "metadata": {
                    "id": "00000000-0000-0000-0000-000000000000"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "patient-controller"
        ],
        "summary": "Delete an existing patient",
        "description": "Deletes the patient with the matching ID.",
        "operationId": "deletePatient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "`CLIENT`/`VALIDATION_FAILED` - A request parameter validation failed:\n- *id*: NotNull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "CLIENT",
                  "code": "VALIDATION_FAILED",
                  "message": "Validation failed: {{message}}",
                  "metadata": {
                    "parameter": "{{request parameter name}}",
                    "constraint": "{{constraint class name}}",
                    "{{constraint attribute}}": "{{value}}"
                  }
                }
              }
            }
          },
          "404": {
            "description": "`SERVICE`/`PATIENT_NOT_FOUND` - Patient does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "SERVICE",
                  "code": "PATIENT_NOT_FOUND",
                  "message": "Patient does not exists",
                  "metadata": {
                    "id": "00000000-0000-0000-0000-000000000000"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/phone/country": {
      "get": {
        "tags": [
          "phone-number-controller"
        ],
        "summary": "List the supported phone-countries",
        "description": "Returns the list of all supported phone-countries.",
        "operationId": "listPhoneCountries",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "The language in which the phone-country names should be returned.<br/>\nFall-back to english (\"en-US\") if the locale is unknown or unsupported.",
            "required": false,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneCountries"
                }
              }
            }
          },
          "400": {
            "description": "`CLIENT`/`VALIDATION_FAILED` - A request parameter validation failed:\n- *locale*: Size(max=255)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "CLIENT",
                  "code": "VALIDATION_FAILED",
                  "message": "Validation failed: {{message}}",
                  "metadata": {
                    "parameter": "{{request parameter name}}",
                    "constraint": "{{constraint class name}}",
                    "{{constraint attribute}}": "{{value}}"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/country": {
      "get": {
        "tags": [
          "country-controller"
        ],
        "summary": "List the supported countries",
        "description": "Returns the list of all supported countries.",
        "operationId": "listCountries",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "The language in which the country names should be returned.<br/>\nFall-back to english (\"en-US\") if the locale is unknown or unsupported.",
            "required": false,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            }
          },
          "400": {
            "description": "`CLIENT`/`VALIDATION_FAILED` - A request parameter validation failed:\n- *locale*: Size(max=255)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "type": "CLIENT",
                  "code": "VALIDATION_FAILED",
                  "message": "Validation failed: {{message}}",
                  "metadata": {
                    "parameter": "{{request parameter name}}",
                    "constraint": "{{constraint class name}}",
                    "{{constraint attribute}}": "{{value}}"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParsePhoneNumberRequest": {
        "required": [
          "countryCallingCode",
          "number"
        ],
        "type": "object",
        "properties": {
          "countryCallingCode": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "Patient": {
        "required": [
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthdate": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE"
            ]
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "PhoneCountries": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneCountry"
            }
          }
        }
      },
      "PhoneCountry": {
        "type": "object",
        "properties": {
          "regionCode": {
            "type": "string"
          },
          "callingCode": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Countries": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "countries": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Country"
            }
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CLIENT",
              "SERVICE",
              "UNKNOWN"
            ]
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      }
    }
  }
}
